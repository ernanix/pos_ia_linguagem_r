if (l == c)
matriz[l,c] <- 0
}
}
for (l in l:nrow(matriz)) {
for (c in c:ncol(matriz)) {
if (l == c) {
matriz[l,c] <- 0
}
}
}
for (l in 1:nrow(matriz)) {
for (c in 1:ncol(matriz)) {
if (l == c) {
matriz[l,c] <- 0
}
}
}
matriz
matriz <-matrix(data=NA,nrow=5,ncol=5)
for (l in 1:nrow(matriz)) {
for (c in 1:ncol(matriz)) {
if (l == c) {
matriz[l,c] <- 0
}
if (l==c-1 || l-1==c){
matriz[l,c] <- 1
}
}
}
matriz
#Use laços aninhados para criar a matriz abaixo. Faça a alocação prévia da matriz com valores NA
matriz <-matrix(data=NA,nrow=5,ncol=5)
for (l in 1:nrow(matriz)) {
for (c in 1:ncol(matriz)) {
if (l == c) {
matriz[l,c] <- 0
}
if (l==c-1 || l-1==c){
matriz[l,c] <- 1
}
if (l==c-2 || l-2==c){
matriz[l,c] <- 2
}
if (l==c-3 || l-3==c){
matriz[l,c] <- 3
}
if (l==c-4 || l-4==c){
matriz[l,c] <- 4
}
}
}
matriz
#Crie o seguinte data frame
student.df <- data.frame( name = c("Sue", "Eva", "Henry", "Jan"),
sex = c("f", "f", "m", "m"),
years = c(21,31,29,19));
View(student.df)
knitr::opts_chunk$set(echo = FALSE)
setwd("C:/Users/escneto/Documents/Estudos/Pos_IA_UFPR/Exercicio1")
setwd("C:/Users/escneto/Documents/Estudos/Pos_IA_UFPR/Estatistica_Aplicada_II/Exercicio1")
load("imoveiscwbav.RData")
View(imoveiscwbav)
library(plyr)
library(readr)
library(dplyr)
library(caret)
library(ggplot2)
library(repr)
library(glmnet)
load("C:/Users/escneto/Documents/Estudos/Pos_IA_UFPR/Estatistica_Aplicada_II/Arquivos_para_R/wage.RData")
View(wage)
names(imoveiscwbav)
cols_reg = c('age','parea','tarea','bath','ensuit','garag','plaz','park','trans',
'kidca','school','health','bike','barb','balc','elev','fitg','party','categ')
cols_reg = c('husage', 'husearns', 'huseduc', 'hushrs',
'earns', 'age', 'educ', 'hrwage','husblck',
'hushisp', 'kidge6', 'black', 'hispanic',
'union', 'kidlt6')
dummies <- dummyVars(hrwage ~ husage+husearns+huseduc+hushrs+
earns+age+educ+husblck+hushisp+kidge6+
black+hispanic+union+kidlt6,
data = dat[,cols_reg])
dummies <- dummyVars(hrwage ~ husage+husearns+huseduc+hushrs+
earns+age+educ+husblck+hushisp+kidge6+
black+hispanic+union+kidlt6,
data = wage[,cols_reg])
View(dummies)
dim(train_dummies)
cols_reg = c('age','parea','tarea','bath','ensuit','garag','plaz','park','trans',
'kidca','school','health','bike','barb','balc','elev','fitg','party','categ')
dummies <- dummyVars(price ~ age+parea+tarea+bath+ensuit+garag+plaz+park+trans+
kidca+school+health+bike+barb+balc+elev+fitg+party+categ,
data = imoveiscwbav[,cols_reg])
cols_reg = c('price','age','parea','tarea','bath','ensuit','garag','plaz','park','trans',
'kidca','school','health','bike','barb','balc','elev','fitg','party','categ')
dummies <- dummyVars(price ~ age+parea+tarea+bath+ensuit+garag+plaz+park+trans+
kidca+school+health+bike+barb+balc+elev+fitg+party+categ,
data = imoveiscwbav[,cols_reg])
train_dummies = predict(dummies, newdata = train[,cols_reg])
set.seed(21)
index = sample(1:nrow(imoveiscwbav), 0.8*nrow(imoveiscwbav))
train = dat[index,]
train = imoveiscwbav[index,]
test = imoveiscwbav[-index,]
cols_reg = c('price','age','parea','tarea','bath','ensuit','garag','plaz','park','trans',
'kidca','school','health','bike','barb','balc','elev','fitg','party','categ')
dummies <- dummyVars(price ~ age+parea+tarea+bath+ensuit+garag+plaz+park+trans+
kidca+school+health+bike+barb+balc+elev+fitg+party+categ,
data = imoveiscwbav[,cols_reg])
train_dummies = predict(dummies, newdata = train[,cols_reg])
test_dummies = predict(dummies, newdata = test[,cols_reg])
print(paste("Treino (linhas e colunas):",dim(train_dummies)))
nrows(train_dummies)
nrow(train_dummies)
x = as.matrix(train_dummies)
y_train = train$price
x_test = as.matrix(test_dummies)
y_test = test$price
lambdas <- 10^seq(2, -3, by = -.1)
lambdas
ridge_lamb <- cv.glmnet(x, y_train, alpha = 0,
lambda = lambdas)
ridge_lamb
best_lambda_ridge <- ridge_lamb$lambda.min
print(paste("best_lambda_ridge",best_lambda_ridge))
ridge_reg = glmnet(x, y_train, nlambda = 25, alpha = 0,
family = 'gaussian',
lambda = best_lambda_ridge)
summary(ridge_reg)
library(plyr)
library(readr)
library(dplyr)
library(caret)
library(ggplot2)
library(repr)
library(glmnet)
load("C:/Users/escneto/Documents/Estudos/Pos_IA_UFPR/Estatistica_Aplicada_II/Arquivos_para_R/wage.RData")
dat <- wage
glimpse(dat)
gc()
set.seed(302)
index = sample(1:nrow(dat), 0.8*nrow(dat))
train = dat[index,] # Create the training data
test = dat[-index,] # Create the test data
dim(train)
dim(test)
cols = c('husage', 'husearns', 'huseduc', 'hushrs', 'earns',
'age', 'educ', 'hrwage')
pre_proc_val <- preProcess(train[,cols], method = c("center", "scale"))
View(pre_proc_val)
train[,cols] = predict(pre_proc_val, train[,cols])
test[,cols] = predict(pre_proc_val, test[,cols])
summary(train)
View(wage)
train[,cols] = predict(pre_proc_val, train[,cols])
test[,cols] = predict(pre_proc_val, test[,cols])
summary(train)
summary(test)
cols_reg = c('husage', 'husearns', 'huseduc', 'hushrs',
'earns', 'age', 'educ', 'hrwage','husblck',
'hushisp', 'kidge6', 'black', 'hispanic',
'union', 'kidlt6')
dummies <- dummyVars(hrwage ~ husage+husearns+huseduc+hushrs+
earns+age+educ+husblck+hushisp+kidge6+
black+hispanic+union+kidlt6,
data = wage[,cols_reg])
dummies
train
train_dummies = predict(dummies, newdata = train[,cols_reg])
test_dummies = predict(dummies, newdata = test[,cols_reg])
print(dim(train_dummies)); print(dim(test_dummies))
x = as.matrix(train_dummies)
y_train = train$hrwage
y_test = test$hrwage
### The optimal lambda value ########
lambdas <- 10^seq(2, -3, by = -.1)
ridge_lamb <- cv.glmnet(x, y_train, alpha = 0,
lambda = lambdas)
best_lambda_ridge <- ridge_lamb$lambda.min
best_lambda_ridge
ridge_reg = glmnet(x, y_train, nlambda = 25, alpha = 0,
family = 'gaussian',
lambda = best_lambda_ridge)
summary(ridge_reg)
ridge_reg[["beta"]]
# Compute R^2 from true and predicted values
eval_results <- function(true, predicted, df) {
SSE <- sum((predicted - true)^2)
SST <- sum((true - mean(true))^2)
R_square <- 1 - SSE / SST
RMSE = sqrt(SSE/nrow(df))
# Model performance metrics
data.frame(
RMSE = RMSE,
Rsquare = R_square
)
}
eval_results()
# Prediction and evaluation on train data
predictions_train <- predict(ridge_reg, s = best_lambda_ridge,
newx = x)
predictions_train
eval_results(y_train, predictions_train, train)
# Prediction and evaluation on test data
predictions_test <- predict(ridge_reg, s = best_lambda_ridge,
newx = x_test)
x_test = as.matrix(test_dummies)
y_test = test$hrwage
# Prediction and evaluation on train data
predictions_train <- predict(ridge_reg, s = best_lambda_ridge,
newx = x)
eval_results(y_train, predictions_train, train)
# Prediction and evaluation on test data
predictions_test <- predict(ridge_reg, s = best_lambda_ridge,
newx = x_test)
eval_results(y_test, predictions_test, test)
summary(wage)
#Para:
# husage = 40 anos
husage = (40-pre_proc_val[["mean"]][["husage"]])/
pre_proc_val[["std"]][["husage"]]
husage
pre_proc_val[["mean"]][["husage"]]
pre_proc_val[["std"]][["husage"]]
View(pre_proc_val)
#Para:
# husage = 40 anos
husage = (40-pre_proc_val[["mean"]][["husage"]])/
pre_proc_val[["std"]][["husage"]]
# husearns = 551
husearns = (551-pre_proc_val[["mean"]][["husearns"]])/
pre_proc_val[["std"]][["husearns"]]
# huseduc = 13
huseduc = (13-pre_proc_val[["mean"]][["huseduc"]])/
pre_proc_val[["std"]][["huseduc"]]
# husblck = 0
husblck = 0
# hushisp = 0
hushisp = 0
# hushrs = 40
hushrs = (40-pre_proc_val[["mean"]][["hushrs"]])/
pre_proc_val[["std"]][["hushrs"]]
# kidge6 = 0
kidge6 = 0
# earns = 355.5
earns = (355.5-pre_proc_val[["mean"]][["earns"]])/
pre_proc_val[["std"]][["earns"]]
# age = 37 anos
age = (37-pre_proc_val[["mean"]][["age"]])/
pre_proc_val[["std"]][["age"]]
# black = 0
black = 0
# educ = 13
educ = (13-pre_proc_val[["mean"]][["educ"]])/
pre_proc_val[["std"]][["educ"]]
# hispanic = 0
hispanic = 0
# union = 0
union = 0
# kidlt6 = 0
kidlt6 = 0
our_pred = as.matrix(data.frame(husage=husage,
husearns=husearns,
huseduc=huseduc,
husblck=husblck,
hushisp=hushisp,
hushrs=hushrs,
kidge6=kidge6,
earns=earns,
age=age,
black=black,
educ=educ,
hispanic=hispanic,
union=union,
kidlt6=kidlt6))
predict_our_ridge <- predict(ridge_reg, s = best_lambda_ridge,
newx = our_pred)
predict_our_ridge
wage_pred_ridge=(predict_our_ridge*
pre_proc_val[["std"]][["hrwage"]])+
pre_proc_val[["mean"]][["hrwage"]]
wage_pred_ridge
summary(wage)
n <- nrow(train)
m <- wage_pred_ridge
s <- pre_proc_val[["std"]][["hrwage"]]
dam <- s/sqrt(n)
CIlwr_ridge <- m + (qnorm(0.025))*dam
CIupr_ridge <- m - (qnorm(0.025))*dam
CIlwr_ridge
CIupr_ridge
setwd("C:/Users/escneto/Documents/Estudos/Pos_IA_UFPR/Estatistica_Aplicada_II/Exercicio1")
load("imoveiscwbav.RData")
View(imoveiscwbav)
set.seed(21)
index = sample(1:nrow(imoveiscwbav), 0.8*nrow(imoveiscwbav))
train = imoveiscwbav[index,]
test = imoveiscwbav[-index,]
View(test)
View(train)
View(test)
View(train)
print(paste("Quantidade treino:",nrow(train)))
print(paste("Quantidade teste:",nrow(test)))
cols = c('price','age','parea','tarea','bath','ensuit','garag','plaz','park','trans',
'kidca','school','health','bike')
pre_proc_val <- preProcess(train[,cols], method = c("center", "scale"))
View(train)
train[,cols] = predict(pre_proc_val, train[,cols])
test[,cols] = predict(pre_proc_val, test[,cols])
summary(train)
summary(test)
cols_reg = c('price','age','parea','tarea','bath','ensuit','garag','plaz','park','trans',
'kidca','school','health','bike','barb','balc','elev','fitg','party','categ')
dummies <- dummyVars(price ~ age+parea+tarea+bath+ensuit+garag+plaz+park+trans+
kidca+school+health+bike+barb+balc+elev+fitg+party+categ,
data = imoveiscwbav[,cols_reg])
dummies
train_dummies = predict(dummies, newdata = train[,cols_reg])
View(train_dummies)
cols_reg = c('price','age','parea','tarea','bath','ensuit','garag','plaz','park','trans',
'kidca','school','health','bike','barb','balc','elev','fitg','party','categ')
dummies <- dummyVars(price ~ age+parea+tarea+bath+ensuit+garag+plaz+park+trans+
kidca+school+health+bike+barb+balc+elev+fitg+party+categ,
data = imoveiscwbav[,cols_reg])
train_dummies = predict(dummies, newdata = train[,cols_reg])
test_dummies = predict(dummies, newdata = test[,cols_reg])
x = as.matrix(train_dummies)
y_train = train$price
x_test = as.matrix(test_dummies)
y_test = test$price
lambdas <- 10^seq(2, -3, by = -.1)
ridge_lamb <- cv.glmnet(x, y_train, alpha = 0,
lambda = lambdas)
best_lambda_ridge <- ridge_lamb$lambda.min
print(paste("best_lambda_ridge:",best_lambda_ridge))
ridge_reg = glmnet(x, y_train, nlambda = 25, alpha = 0,
family = 'gaussian',
lambda = best_lambda_ridge)
summary(ridge_reg)
ridge_reg = glmnet(x, y_train, nlambda = 25, alpha = 0,
family = 'gaussian',
lambda = best_lambda_ridge)
ridge_reg[["beta"]]
eval_results <- function(true, predicted, df) {
SSE <- sum((predicted - true)^2)
SST <- sum((true - mean(true))^2)
R_square <- 1 - SSE / SST
RMSE = sqrt(SSE/nrow(df))
# Model performance metrics
data.frame(
RMSE = RMSE,
Rsquare = R_square
)
}
print(eval_results)
predictions_train <- predict(ridge_reg, s = best_lambda_ridge,
newx = x)
eval_results(y_train, predictions_train, train)
predictions_test <- predict(ridge_reg, s = best_lambda_ridge,
newx = x_test)
eval_results(y_test, predictions_test, test)
eval_results(y_test, predictions_test, test)
print(paste("R^2 e RMSE - Treino",eval_results(y_train, predictions_train, train)))
print("R^2 e RMSE - Treino")
print(eval_results(y_train, predictions_train, train))
print("R^2 e RMSE - Treino")
print(eval_results(y_train, predictions_train, train))
summary (imoveiscwbav)
ridge_reg = glmnet(x, y_train, nlambda = 25, alpha = 0,
family = 'gaussian',
lambda = best_lambda_ridge)
ridge_reg[["beta"]]
set.seed(21)
index = sample(1:nrow(imoveiscwbav), 0.8*nrow(imoveiscwbav))
train = imoveiscwbav[index,]
test = imoveiscwbav[-index,]
print(paste("Quantidade treino:",nrow(train)))
print(paste("Quantidade teste:",nrow(test)))
cols = c('price','age','parea','tarea','bath','ensuit','garag','plaz','park','trans',
'kidca','school','health','bike')
pre_proc_val <- preProcess(train[,cols], method = c("center", "scale"))
train[,cols] = predict(pre_proc_val, train[,cols])
test[,cols] = predict(pre_proc_val, test[,cols])
print("Treino:")
summary(train)
print("---------------------------------------------")
print("Teste:")
summary(test)
cols_reg = c('price','age','parea','tarea','bath','ensuit','garag','plaz','park','trans',
'kidca','school','health','bike','barb','balc','elev','fitg','party','categ')
dummies <- dummyVars(price ~ age+parea+tarea+bath+ensuit+garag+plaz+park+trans+
kidca+school+health+bike+barb+balc+elev+fitg+party+categ,
data = imoveiscwbav[,cols_reg])
train_dummies = predict(dummies, newdata = train[,cols_reg])
test_dummies = predict(dummies, newdata = test[,cols_reg])
x = as.matrix(train_dummies)
y_train = train$price
x_test = as.matrix(test_dummies)
y_test = test$price
lambdas <- 10^seq(2, -3, by = -.1)
ridge_lamb <- cv.glmnet(x, y_train, alpha = 0,
lambda = lambdas)
best_lambda_ridge <- ridge_lamb$lambda.min
print(paste("Valor ótimo de lambda:",best_lambda_ridge))
train_cont <- trainControl(method = "repeatedcv",
number = 10,
repeats = 5,
search = "random",
verboseIter = TRUE)
elastic_reg <- train(price ~ age+parea+tarea+bath+
ensuit+garag+plaz+park+trans+kidca+
school+health+bike+barb+balc+elev+fitg+
party+categ,
data = train,
method = "glmnet",
tuneLength = 10,
trControl = train_cont)
elastic_reg$bestTune
gc()
##############################Classificação - Base Iris
install.packages("e1071")
df_rs <-read.csv("C:/Users/escneto/Documents/Estudos/Pos_IA_UFPR/Linguagem_Programacao_R/real_state_tw.csv",sep=";",dec=",")
View(df_rs)
treino <- df[indices,]
indices <- createDataPartition(df_rs$Y.house.price.of.unit.area, p=0.80, list=FALSE)
#####
library(mlbench)
library(caret)
library(mice)
indices <- createDataPartition(df_rs$Y.house.price.of.unit.area, p=0.80, list=FALSE)
treino <- df[indices,]
treino <- df_rs[indices,]
teste <- df_rs[-indices,]
rf <- train(Y.house.price.of.unit.area~.,data=treino,method="rf")
predicoes.rf <- predict(rf,teste)
predicoes.rf <- predict(rf,teste)
# treino e predição - SVM
svm <- train(Y.house.price.of.unit.area~.,data=treino,method="svmRadial")
predicoes.svm <- predict(svm,teste)
# treino e predição - RNA (Redes Neurais)
rna <- train(Y.house.price.of.unit.area~.,data=treino,method="nnet")
predicoes.rna <- predict(rna,teste)
# treino e predição - RNA (Redes Neurais)
rna <- train(Y.house.price.of.unit.area~.,data=treino,method="nnet",trace=FALSE)
predicoes.rna <- predict(rna,teste)
# treino e predição - MLP (Perceptron MultiLayers)
mlp <- mlp(treino[,1:7], treino[,8], linOut=T)
# treino e predição - MLP (Perceptron MultiLayers)
install.packages(mlp)
# treino e predição - MLP (Perceptron MultiLayers)
install.packages("mlp")
library("mlp")
library(mlp)
# treino e predição - MLP (Perceptron MultiLayers)
install.packages("rsnns")
# treino e predição - MLP (Perceptron MultiLayers)
install.packages("RSNNS")
library(RSNNS)
mlp <- mlp(treino[,1:7], treino[,8], linOut=T)
View(mlp)
predicoes.mlp <- predict(mlp,teste[,1:7])
#Obtém metricas de cada modelo
rmse.rf <- RMSE(predicoes.rf, teste$Y.house.price.of.unit.area)
rmse.svm <- RMSE(predicoes.svm, teste$Y.house.price.of.unit.area)
rmse.rna <- RMSE(predicoes.rna, teste$Y.house.price.of.unit.area)
rmse.mlp <- RMSE(predicoes.mlp, teste$Y.house.price.of.unit.area)
rmse.rf
rmse.svm
rmse.rna
rmse.mlp
v1<-c(2,-1,4)
v2<-c(3,0,1)
sum(v1+v2)
v1<-c(13,41,-23)
sum(v1+v2)
knitr::opts_chunk$set(echo = FALSE)
setwd("C:/Users/escneto/Documents/Estudos/Pos_IA_UFPR/Linguagem_Programacao_R/atividade")
df_vol <-read.csv("Volumes.csv",sep=";",dec=",")
df_vol <-read.csv("Volumes.csv",sep=";",dec=",")
getwd()
setwd("C:/Users/escneto/Documents/Estudos/Pos_IA_UFPR/Linguagem_Programacao_R/atividade")
getwd()
df_vol <-read.csv("Volumes.csv",sep=";",dec=",")
View(predicoes.mlp)
View(df_vol)
df_vol$NR <- NULL
View(df_vol)
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(echo = FALSE)
setwd("C:/Users/escneto/Documents/Estudos/Pos_IA_UFPR/Linguagem_Programacao_R/atividade")
library("mlbench")
data(Satellite)
dados_satelite <- Satellite
library(caret)
set.seed(2114)
indices <- createDataPartition(dados_satelite$classes, p=0.80, list=FALSE)
treino <- dados_satelite[indices,]
teste <- dados_satelite[-indices,]
rf <- train(classes~x.17+x.18+x.19+x.20, data=treino, method="rf")
library(caret)
set.seed(2114)
indices <- createDataPartition(dados_satelite$classes, p=0.80, list=FALSE)
treino <- dados_satelite[indices,]
teste <- dados_satelite[-indices,]
rf <- train(classes~x.17+x.18+x.19+x.20, data=treino, method="rf")
rf <- train(classes~x.17+x.18+x.19+x.20, data=treino, method="rf")
View(treino)
rf <- caret::train(classes~x.17+x.18+x.19+x.20, data=treino, method="rf")
svm <- train(classes~x.17+x.18+x.19+x.20, data=treino, method="svmRadial")
