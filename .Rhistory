print("Testando a variável 'kidca':")
PanJenKidca<-fform(imoveiscwbav,"kidca",formBase)
print("Testando a variável 'school':")
PanJenSchool<-fform(imoveiscwbav,"school",formBase)
print("Testando a variável 'health':")
PanJenHealth<-fform(imoveiscwbav,"health",formBase)
print("Testando a variável 'bike':")
PanJenBike<-fform(imoveiscwbav,"bike",formBase)
print("F tabelado:")
qf(0.95, df1=38, df2=483)
resettest(formBase,power=2:3, type="regressor", data=imoveiscwbav)
print('sqrt(age)')
imoveiscwbav$age = sqrt(imoveiscwbav$age)
print('sqrt(parea)')
imoveiscwbav$parea = sqrt(imoveiscwbav$parea)
print('sqrt(tarea)')
imoveiscwbav$tarea = sqrt(imoveiscwbav$tarea)
print('park ^ 2')
imoveiscwbav$park = (imoveiscwbav$park)^2
print('log(trans)')
imoveiscwbav$trans = log(imoveiscwbav$trans)
resettest(formBase,power=2:3, type="regressor", data=imoveiscwbav)
print("Verificando multicolinearidade pelo VIF - Valor de Inflação da Variância")
vif(lm(price~age+parea+tarea+bath+ensuit+garag+plaz+park+trans+kidca+school+health+bike,data=imoveiscwbav), type="high-order")
print("Excluindo 'tarea'")
formBase = formula(price~age+parea+bath+ensuit+garag+plaz+park+trans+kidca+school+health+bike+barb+balc+elev+fitg+party+categ)
print("Verificando pela matriz de correlação")
cor(imoveiscwbav[,c("age","parea","tarea","bath","ensuit","garag","plaz","park","trans","kidca","school","health","bike")],
use="complete")
print("Excluindo 'bath','ensuit' e 'garag'")
formBase = formula(price~age+parea+plaz+park+trans+kidca+school+health+bike+barb+balc+elev+fitg+party+categ)
resultados <- lm(formula=formBase,data=imoveiscwbav)
summary (resultados)
step <- stepwise(resultados, direction= 'backward/forward', criterion ='AIC')
step
bptest(formBase,studentize=FALSE, data=imoveiscwbav)
print("O valor chiquadrado tabelado é:")
qchisq(0.95, df=11, lower.tail = TRUE)
imoveiscwbav$lprice <- log(imoveiscwbav$price)
imoveiscwbav$lage <- log(imoveiscwbav$age)
imoveiscwbav$lparea <- log(imoveiscwbav$parea)
imoveiscwbav$lplaz <- log(imoveiscwbav$plaz)
imoveiscwbav$lpark <- log(imoveiscwbav$park)
imoveiscwbav$lkidca <- log(imoveiscwbav$kidca)
imoveiscwbav$lbike <- log(imoveiscwbav$bike)
formBaseL = formula(lprice~lage+lparea+lplaz+lpark+lkidca+lbike+balc+elev+fitg+party+categ)
bptest(formBaseL,studentize=FALSE, data=imoveiscwbav)
resultados <- lm(formula=formBaseL,data=imoveiscwbav)
summary (resultados)
resettest(formBase,power=2:3, type="regressor", data=imoveiscwbav)
resettest(formBaseL,power=2:3, type="regressor", data=imoveiscwbav)
resultrob <- lmRob(formBaseL,data=imoveiscwbav)
summary(resultrob)
model_performance(resultados)
model_performance(resultrob)
val <- predict(object = resultados,
data.frame(lage=1.0986, lparea=2.394,lplaz=-1.5764,lpark=1.2672,lkidca=0.3362,lbike=-1.0531,balc=0,elev=0,fitg=0,party=1,categ=1))
val
exp(val)
val <- predict(object = resultrob,
data.frame(lage=1.0986, lparea=2.394,lplaz=-1.5764,lpark=1.2672,lkidca=0.3362,lbike=-1.0531,balc=0,elev=0,fitg=0,party=1,categ=1))
val
exp(val)
knitr::opts_chunk$set(echo = FALSE)
load("D:/Cursos/Pos_IA/Estatistica_aplicada_I/exercicio2/imoveiscwbav.RData")
imoveiscwbav$plaz = exp(imoveiscwbav$plaz)
imoveiscwbav$park = exp(imoveiscwbav$park)
imoveiscwbav$trans = exp(imoveiscwbav$trans)
imoveiscwbav$kidca = exp(imoveiscwbav$kidca)
imoveiscwbav$school = exp(imoveiscwbav$school)
imoveiscwbav$health = exp(imoveiscwbav$health)
imoveiscwbav$bike = exp(imoveiscwbav$bike)
library("PanJen")
library (carData)
library(car)
library (zoo)
library (lmtest)
library(RcmdrMisc)
library(robust)
library(performance)
formBase = formula(price~age+parea+tarea+bath+ensuit+garag+plaz+park+trans+kidca+school+health+bike+barb+balc+elev+fitg+party+categ)
resultados <- lm(formula=formBase,data=imoveiscwbav)
summary (resultados)
print("Testando a variável 'age':")
PanJenAge<-fform(imoveiscwbav,"age",formBase)
print("Testando a variável 'parea':")
PanJenParea<-fform(imoveiscwbav,"parea",formBase)
print("Testando a variável 'tarea':")
PanJenTarea<-fform(imoveiscwbav,"tarea",formBase)
print("Testando a variável 'plaz':")
PanJenPlaz<-fform(imoveiscwbav,"plaz",formBase)
print("Testando a variável 'park':")
PanJenPark<-fform(imoveiscwbav,"park",formBase)
print("Testando a variável 'trans':")
PanJenTrans<-fform(imoveiscwbav,"trans",formBase)
print("Testando a variável 'kidca':")
PanJenKidca<-fform(imoveiscwbav,"kidca",formBase)
print("Testando a variável 'school':")
PanJenSchool<-fform(imoveiscwbav,"school",formBase)
print("Testando a variável 'health':")
PanJenHealth<-fform(imoveiscwbav,"health",formBase)
print("Testando a variável 'bike':")
PanJenBike<-fform(imoveiscwbav,"bike",formBase)
outlierTest(resultados)
resettest(formBase,power=2:3, type="regressor", data=imoveiscwbav)
print("F tabelado:")
qf(0.95, df1=38, df2=483)
print('sqrt(age)')
imoveiscwbav$age = sqrt(imoveiscwbav$age)
print('sqrt(parea)')
imoveiscwbav$parea = sqrt(imoveiscwbav$parea)
print('sqrt(tarea)')
imoveiscwbav$tarea = sqrt(imoveiscwbav$tarea)
print('1/park')
imoveiscwbav$park = 1/imoveiscwbav$park
print('1/trans')
imoveiscwbav$trans = 1/imoveiscwbav$trans
print('sqrt(kidca)')
imoveiscwbav$kidca = sqrt(imoveiscwbav$kidca)
resettest(formBase,power=2:3, type="regressor", data=imoveiscwbav)
print("Verificando pela matriz de correlação")
cor(imoveiscwbav[,c("age","parea","tarea","bath","ensuit","garag","plaz","park","trans","kidca","school","health","bike")],
use="complete")
print("Excluindo 'tarea','bath','ensuit' e 'garag'")
formBase = formula(price~age+parea+plaz+park+trans+kidca+school+health+bike+barb+balc+elev+fitg+party+categ)
print("Verificando multicolinearidade pelo VIF - Valor de Inflação da Variância")
vif(lm(formBase,data=imoveiscwbav), type="high-order")
print("Refazendo o RESETTest")
resettest(formBase,power=2:3, type="regressor", data=imoveiscwbav)
resultados <- lm(formula=formBase,data=imoveiscwbav)
summary (resultados)
step <- stepwise(resultados, direction= 'backward/forward', criterion ='AIC')
step
formBase = formula(price~age+parea+plaz+park+school+balc+elev+fitg+party+categ)
resultados <- lm(formula=formBase,data=imoveiscwbav)
summary (resultados)
resettest(formBase,power=2:3, type="regressor", data=imoveiscwbav)
bptest(formBase,studentize=FALSE, data=imoveiscwbav)
print("O valor chiquadrado tabelado é:")
qchisq(0.95, df=10, lower.tail = TRUE)
imoveiscwbav$lprice <- log(imoveiscwbav$price)
imoveiscwbav$lage <- log(imoveiscwbav$age)
imoveiscwbav$lparea <- log(imoveiscwbav$parea)
imoveiscwbav$lplaz <- log(imoveiscwbav$plaz)
imoveiscwbav$lpark <- log(imoveiscwbav$park)
imoveiscwbav$lschool <- log(imoveiscwbav$school)
formBaseL = formula(lprice~lage+lparea+lplaz+lpark+lschool+balc+elev+fitg+party+categ)
bptest(formBaseL,studentize=FALSE, data=imoveiscwbav)
resultados <- lm(formula=formBaseL,data=imoveiscwbav)
summary (resultados)
resultrob <- lmRob(formBaseL,data=imoveiscwbav)
summary(resultrob)
model_performance(resultados)
model_performance(resultrob)
confint(resultados, level = 0.95)
confint(resultrob, level=0.95)
val <- predict(object = resultrob,
data.frame(lage=1.0986, lparea=2.394,lplaz=-1.5764,lpark=1.2672,lschool=0.5675,balc=0,elev=0,fitg=0,party=1,categ=1))
val
exp(13.67026)
formBaseL = formula(lprice~lage+lparea+lpark+lschool+balc+elev+fitg+party+categ)
resultrob <- lmRob(formBaseL,data=imoveiscwbav)
summary(resultrob)
formBaseL = formula(lprice~lage+lparea+lpark+balc+elev+fitg+party+categ)
resultrob <- lmRob(formBaseL,data=imoveiscwbav)
summary(resultrob)
predict(object = resultrob,
data.frame(lage=1.0986, lparea=2.394,lpark=1.2672,balc=0,elev=0,fitg=0,party=1,categ=1))
exp(13.94635)
install.packages("mlbench")
data(mlbench)
data(Satellite)
library(mlbench)
data("Satellite")
View(Satellite)
knitr::opts_chunk$set(echo = TRUE)
library(mlbench)
data("Satellite")
library(mlbench)
barplot(Satellite$classes)
barplot(table(Satellite$classes)
)
pie(table(Satellite$classes))
#Crie o seguinte data frame
student.df <- data.frame( name = c("Sue", "Eva", "Henry", "Jan"),sex = c("f", "f", "m", "m"),years = c(21,31,29,19));
#Use laços aninhados para criar a matriz abaixo. Faça a alocação prévia da matriz com valores NA
matriz <-matrix(data=NA,nrow=5,ncol=5)
for (l in 1:nrow(matriz)) {
for (c in 1:ncol(matriz)) {
if (l == c) {
matriz[l,c] <- 0
}
if (l==c-1 || l-1==c){
matriz[l,c] <- 1
}
if (l==c-2 || l-2==c){
matriz[l,c] <- 2
}
if (l==c-3 || l-3==c){
matriz[l,c] <- 3
}
if (l==c-4 || l-4==c){
matriz[l,c] <- 4
}
}
}
#Crie o seguinte data frame
student.df <- data.frame( name = c("Sue", "Eva", "Henry", "Jan"),sex = c("f", "f", "m", "m"),years = c(21,31,29,19));
#Usando um comando ifelse(), crie uma coluna chamada teen, booleana, que indica se a pessoa possui menos de 20 anos.
student.df$teen <- ifelse(student.df$years < 20, TRUE, FALSE)
View(student.df)
#Crie o seguinte data frame
a = c(3,7,NA, 9)
b = c(2,NA,9,3)
f = c(5,2,5,6)
d = c(NA,3,4,NA)
mydf = data.frame(a=a,b=b,f=f,d=d)
mydf
mydf[1]
mydf[1,1]
mydf[1,1]
mydf$a
nrow(mydf)
mydf$e <- elsif(mydf$a.isNA(),mydf$b,elsif(mydf$b.isNA(),mydf$d,mydf$c))
mydf$e <- ifelse(mydf$a.isNA(),mydf$b,elsif(mydf$b.isNA(),mydf$d,mydf$c))
mydf$e <- ifelse(mydf$a.isNA(),mydf$b,ifelse(mydf$b.isNA(),mydf$d,mydf$c))
mydf$e <- ifelse(mydf$a.isNA(),mydf$b,0)
mydf$e <- ifelse(mydf$a.isNA,mydf$b,0)
mydf$e <- ifelse(isNA(mydf$a),mydf$b,0)
mydf$e <- ifelse(is.NA(mydf$a),mydf$b,0)
mydf$e <- ifelse(is.na(mydf$a),mydf$b,0)
#Crie o seguinte data frame
a = c(3,7,NA, 9)
b = c(2,NA,9,3)
f = c(5,2,5,6)
d = c(NA,3,4,NA)
mydf = data.frame(a=a,b=b,f=f,d=d)
mydf$e <- ifelse(is.na(mydf$a),mydf$b,ifelse(is.na(mydf$b),mydf$d,mydf$c))
mydf$e <- ifelse(is.na(mydf$a),mydf$b,ifelse(is.na(mydf$b),mydf$d,mydf$c))
mydf$e <- ifelse(is.na(mydf$a),mydf$b,mydf$c)
mydf$e <- ifelse(is.na(mydf$a),mydf$b,mydf$c)
mydf$a
mydf$b
mydf$c
mydf$f
mydf$e <- ifelse(is.na(mydf$a),mydf$b,ifelse(is.na(mydf$b),mydf$d,mydf$f))
View(mydf)
matriz2 <- matrix(1:100000,nrow = 10)
matriz2
ncol(matriz2)
nrow(matriz2)
for (l in 1:nrow(matriz2)) {
suml <- 0
for (c in 1:rcol(matriz2)) {
suml <- suml + matriz2[l,c]
}
print(paste("linha",l,"-soma:",suml))
}
for (l in 1:nrow(matriz2)) {
suml <- 0
for (c in 1:ncol(matriz2)) {
suml <- suml + matriz2[l,c]
}
print(paste("linha",l,"-soma:",suml))
}
nrow(matriz2)
matriz2 <- matrix(1:100000,ncol = 10)
matriz2
for (l in 1:nrow(matriz2)) {
suml <- 0
for (c in 1:ncol(matriz2)) {
suml <- suml + matriz2[l,c]
}
print(paste("linha",l,"- soma:",suml))
}
#Crie o seguinte data frame
vector1 <- 1:10
vector2 <- c("Odd", "Loop", letters[1:8])
vector3 <- rnorm(10, sd = 10)
df1 <- data.frame(vector1, vector2, vector3, stringsAsFactors = FALSE)
df1
df1[,1]
is.numeric(df1[,1])
is.numeric(df1[,3])
is.numeric(df1[,2])
ncol(df1)
for(c in 1:ncol(df1)) {
for(l in 1:nrow(df1)) {}
}
for(c in 1:ncol(df1)) {
for(l in 1:nrow(df1)) {}
}
nchar("teste")
for(c in 1:ncol(df1)) {
if (is.numeric(df1[,c])) {
print(mean(df1[,c]))
}else{
print(nchar(df1[,c]))
}
}
print(sum(nchar(df1[,c])))
#Faça um laço genérico sobre as colunas deste data frame efetuando o seguinte cálculo:
#  • Se a coluna for numérica, calcula sua média
#  • Se a coluna for de texto calcula a soma dos caracteres na coluna (nchar())
for(c in 1:ncol(df1)) {
if (is.numeric(df1[,c])) {
print(mean(df1[,c]))
}else{
print(sum(nchar(df1[,c])))
}
}
df1
media <- function (valores){
n <- length(valores)
med <- sum(valores)/n
return (med)
}
media(c(1,3,4))
quadrado <- function (numero) {
return (numero^2)
}
multMatrizes <- function (m1,m2) {
return (m1 %*% m2)
}
quadrado(2)
m1 <- <- matrix(5:10, nrow = 2, ncol = 3)
m1 <- matrix(5:10, nrow = 2, ncol = 3)
m2 <- matrix(7:12, nrow = 3, ncol = 2)
multMatrizes(m1,m2)
pessoas <- data.frame(nome=c("Maria","Pedro","Jose"),idade=c(23,32,45))
pessoas
mediaIdade <- function(pessoas) {
return (mean(pessoas$idade))
}
mediaIdade(pessoas)
order(pessoas$idade)
order(pessoas$idade,decreasing = TRUE)
order(pessoas$idade,decreasing = TRUE)
max(pessoa$idade)
max(pessoas$idade)
which(max(pessoas$idade))
having(max(pessoas$idade))
pessoas
which(pessoa$idade = max(pessoa$idade))
which(pessoa$idade == max(pessoa$idade))
which(pessoas$idade == max(pessoas$idade))
pessoas[which(pessoas$idade == max(pessoas$idade)),]
maiorIdade <- function(pessoas){
return(pessoas[which(pessoas$idade == max(pessoas$idade)),])
}
maiorIdade(pessoas)
potencia <- function(x, expoente) {
return (x^expoente)
}
potencia(10,2)
data <- 1:10
sapply(data, potencia)
sapply(data, potencia, expoente = 3)
matriz <- matrix(1:12, nrow=3, ncol=4)
matriz
apply(matriz,1,sum)
apply(matriz,2,sum)
apply(matriz,3,sum)
apply(matriz,1,sum)
matriz <- matrix(1:100000,ncol=10)
apply(matriz,1,sum)
apply(matriz,2,mean)
#Crie o seguinte data frame
idade <- c(56, 34, 67, 33, 25, 28)
peso <- c(78, 67, 56, 44, 56, 89)
altura <- c(165, 171, 167, 167, 166, 181)
dados <- data.frame(idade, peso, altura)
dados
dados
#Dê as seguintes respostas
#• A média de todas as colunas (usando apply)
apply(dados,2,mean)
#• O valor máximo de todas as colunas (usando apply)
apply(matriz,2,max)
#• O valor máximo de todas as colunas (usando apply)
apply(dados,2,max)
#• A raiz quadrada de todos os valores do data frame, como uma matriz
sapply(dados, sqrt)
#• A raiz quadrada de todos os valores do data frame, como uma lista
lapply(dados, sqrt)
#• Todos os valores do data frame multiplicados por 20, como uma matriz (usando uma UDF)
mult20 <- function(x) {
return(x * 20)
}
mult20(3)
sapply(dados,mult20)
x <- c(40, 30, 30, 25, 50, 60, 65, 10, 15, 20, 55, 40, 35, 30)
y <- c(1000, 1500, 1200, 1800, 800, 1000, 500, 3000, 2500, 2000, 800, 1500,
2000, 2000)
x
y
modelo <- lm(y~x)
modelo
summary(modelo)
str(modelo)
novos <- data.frame( x=c(10, 20, 30) )
novos
predict(modelo,novos)
plot(x=x, y=y, xlab="Km", ylab="Euros")
abline(modelo)
resid(modelo)
novos2 <- data.frame( x=c(15, 25, 35) )
predict(modelo,novos2)
resid(modelo)
plot(resid(modelo))
x <- c(6.5,5.8,7.8,8.1,10.4,12.3,13.1,17.4,20.1,24.5,25.5,27.1)
x
y <- c(1.4,1.5,1.7,1.9,2.1,2.2,2.4,3.2,3.7,4.2,4.8,5.2)
modelo <- lm(y~x)
modelo
summary(modelo)
plot(x=x,y=y)
abline(modelo,col="red")
plot(resid(modelo))
abline(0,0,col="red")
setwd("D:\\Cursos\\Pos_IA\\linguagem_r")
dados <- read.csv("/Users/razer/teste.csv")
dados <- read.csv("fruitohms.csv")
dados
View(dados)
modelo <- lm(ohms ~ juice, data=dados)
summary(modelo)
dados <- read.csv("GAGurine.csv")
dados
View(dados)
dados$X <-NULL
modelo <- lm(dados$GAG ~ dados$Age)
coef(modelo)
resid(modelo)
plot(x=dados$Age,y=dados$GAG,xlab = "Age",ylab = "GAG")
abline(modelo,col="red")
dados <- read.csv("CoolingWater.csv")
dados
modelo <- lm(temp ~ poly(time, degree=2), data=dados)
plot(dados$temp ~ dados$time)
modelo
predicao <- predict(modelo, dados)
predicao
lines(y=predicao, x=dados$time, type="l", col="red")
#Para os dados CoolingWater, gere as estimativas com um polinômio de grau 3 e de grau 4.
#Compare as curvas de predição.
dados <- read.csv("CoolingWater.csv")
#Grau 2
modelo <-lm(temp ~ poly(time, degree=2), data=dados)
plot(dados$temp ~ dados$time)
predicao <- predict(modelo,dados)
lines(y=predicao,x=dados$time, type="l", col="red")
#Grau 3
modelo <-lm(temp ~ poly(time, degree=3), data=dados)
plot(dados$temp ~ dados$time)
predicao <- predict(modelo,dados)
lines(y=predicao,x=dados$time, type="l", col="red")
#Grau 4
modelo <-lm(temp ~ poly(time, degree=4), data=dados)
plot(dados$temp ~ dados$time)
predicao <- predict(modelo,dados)
lines(y=predicao,x=dados$time, type="l", col="red")
dados <- cars
View(dados)
modeloG2 <- lm(dist ~ poly(speed, degree=2), data=cars)
modeloG2 <- lm(dist ~ poly(speed, degree=2), data=cars)
modeloG3 <- lm(dist ~ poly(speed, degree=3), data=cars)
modeloG4 <- lm(dist ~ poly(speed, degree=4), data=cars)
modeloG5 <- lm(dist ~ poly(speed, degree=5), data=cars)
View(modeloG5)
summary(modeloG2)
summary(modeloG3)
predicaoG2 <- predict(modeloG2,cars)
predicaoG3 <- predict(modeloG3,cars)
predicaoG4 <- predict(modeloG4,cars)
predicaoG5 <- predict(modeloG5,cars)
plot(cars$dist ~ cars$speed)
plot(cars$speed ~ cars$dist)
plot(cars$dist ~ cars$speed)
lines(y=predicaoG2,x=cars$speed,type="l",col="red")
lines(y=predicaoG3,x=cars$speed,type="l",col="yellow")
lines(y=predicaoG4,x=cars$speed,type="l",col="blue")
lines(y=predicaoG5,x=cars$speed,type="l",col="green")
install.packages("plyr")
install.packages("readr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("caret")
install.packages("ggplot2")
install.packages("repr")
install.packages("glmnet")
library(plyr)
library(readr)
library(dplyr)
library(caret)
library(ggplot2)
library(repr)
library(glmnet)
knitr::opts_chunk$set(echo = FALSE)
setwd("D:/Cursos/Pos_IA/Estatistica_aplicada_II/exercicio1")
load("imoveiscwbav.RData")
setwd("D:/Cursos/Pos_IA/Estatistica_aplicada_II/exercicio1")
load("imoveiscwbav.RData")
setwd("D:/Cursos/Pos_IA/Estatistica_aplicada_II/Exercicio1")
load("imoveiscwbav.RData")
library(plyr)
library(readr)
library(dplyr)
library(caret)
library(ggplot2)
library(repr)
library(glmnet)
