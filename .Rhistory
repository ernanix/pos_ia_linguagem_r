formBase = formula(price~age+parea+plaz+park+trans+kidca+school+health+bike+barb+balc+elev+fitg+party+categ)
print("Verificando multicolinearidade pelo VIF - Valor de Inflação da Variância")
vif(lm(formBase,data=imoveiscwbav), type="high-order")
print("Refazendo o RESETTest")
resettest(formBase,power=2:3, type="regressor", data=imoveiscwbav)
resultados <- lm(formula=formBase,data=imoveiscwbav)
summary (resultados)
step <- stepwise(resultados, direction= 'backward/forward', criterion ='AIC')
step
formBase = formula(price~age+parea+plaz+park+school+balc+elev+fitg+party+categ)
resultados <- lm(formula=formBase,data=imoveiscwbav)
summary (resultados)
resettest(formBase,power=2:3, type="regressor", data=imoveiscwbav)
bptest(formBase,studentize=FALSE, data=imoveiscwbav)
print("O valor chiquadrado tabelado é:")
qchisq(0.95, df=11, lower.tail = TRUE)
imoveiscwbav$lprice <- log(imoveiscwbav$price)
imoveiscwbav$lage <- log(imoveiscwbav$age)
imoveiscwbav$lparea <- log(imoveiscwbav$parea)
imoveiscwbav$lplaz <- log(imoveiscwbav$plaz)
imoveiscwbav$lpark <- log(imoveiscwbav$park)
imoveiscwbav$lschool <- log(imoveiscwbav$school)
formBaseL = formula(lprice~lage+lparea+lplaz+lpark+lschool+balc+elev+fitg+party+categ)
bptest(formBaseL,studentize=FALSE, data=imoveiscwbav)
resettest(formBaseL,power=2:3, type="regressor", data=imoveiscwbav)
resultados <- lm(formula=formBaseL,data=imoveiscwbav)
summary (resultados)
resultrob <- lmRob(formBaseL,data=imoveiscwbav)
summary(resultrob)
model_performance(resultados)
model_performance(resultrob)
confint(resultados, level = 0.95)
confint(resultrob, level=0.95)
val <- predict(object = resultados,
data.frame(lage=1.0986, lparea=2.394,lplaz=-1.5764,lpark=1.2672,lkidca=0.3362,lbike=-1.0531,balc=0,elev=0,fitg=0,party=1,categ=1))
summary(imoveiscwbav)
val <- predict(object = resultados,
data.frame(lage=1.0986, lparea=2.394,lplaz=-1.5764,lpark=1.2672,lschool=0.5675,balc=0,elev=0,fitg=0,party=1,categ=1))
val
exp(val)
exp(13.7664)
load("D:/Cursos/Pos_IA/Estatistica_aplicada_I/exercicio2/imoveiscwbav.RData")
imoveiscwbav$plaz = exp(imoveiscwbav$plaz)
imoveiscwbav$park = exp(imoveiscwbav$park)
imoveiscwbav$trans = exp(imoveiscwbav$trans)
imoveiscwbav$kidca = exp(imoveiscwbav$kidca)
imoveiscwbav$school = exp(imoveiscwbav$school)
imoveiscwbav$health = exp(imoveiscwbav$health)
imoveiscwbav$bike = exp(imoveiscwbav$bike)
library("PanJen")
library (carData)
library(car)
library (zoo)
library (lmtest)
library(RcmdrMisc)
library(robust)
library(performance)
formBase = formula(price~age+parea+tarea+bath+ensuit+garag+plaz+park+trans+kidca+school+health+bike+barb+balc+elev+fitg+party+categ)
resultados <- lm(formula=formBase,data=imoveiscwbav)
summary (resultados)
print("Testando a variável 'age':")
PanJenAge<-fform(imoveiscwbav,"age",formBase)
print("Testando a variável 'parea':")
PanJenParea<-fform(imoveiscwbav,"parea",formBase)
print("Testando a variável 'tarea':")
PanJenTarea<-fform(imoveiscwbav,"tarea",formBase)
print("Testando a variável 'plaz':")
PanJenPlaz<-fform(imoveiscwbav,"plaz",formBase)
print("Testando a variável 'park':")
PanJenPark<-fform(imoveiscwbav,"park",formBase)
print("Testando a variável 'trans':")
PanJenTrans<-fform(imoveiscwbav,"trans",formBase)
print("Testando a variável 'kidca':")
PanJenKidca<-fform(imoveiscwbav,"kidca",formBase)
print("Testando a variável 'school':")
PanJenSchool<-fform(imoveiscwbav,"school",formBase)
print("Testando a variável 'health':")
PanJenHealth<-fform(imoveiscwbav,"health",formBase)
print("Testando a variável 'bike':")
PanJenBike<-fform(imoveiscwbav,"bike",formBase)
resettest(formBase,power=2:3, type="regressor", data=imoveiscwbav)
print('sqrt(age)')
imoveiscwbav$age = sqrt(imoveiscwbav$age)
print('sqrt(parea)')
imoveiscwbav$parea = sqrt(imoveiscwbav$parea)
print('sqrt(tarea)')
imoveiscwbav$tarea = sqrt(imoveiscwbav$tarea)
print('1/park')
imoveiscwbav$park = 1/imoveiscwbav$park
print('1/trans')
imoveiscwbav$trans = 1/imoveiscwbav$trans
print('sqrt(kidca)')
imoveiscwbav$kidca = sqrt(imoveiscwbav$kidca)
resettest(formBase,power=2:3, type="regressor", data=imoveiscwbav)
print("Verificando pela matriz de correlação")
cor(imoveiscwbav[,c("age","parea","tarea","bath","ensuit","garag","plaz","park","trans","kidca","school","health","bike")],
use="complete")
print("Excluindo 'tarea','bath','ensuit' e 'garag'")
formBase = formula(price~age+parea+plaz+park+trans+kidca+school+health+bike+barb+balc+elev+fitg+party+categ)
print("Verificando multicolinearidade pelo VIF - Valor de Inflação da Variância")
vif(lm(formBase,data=imoveiscwbav), type="high-order")
print("Refazendo o RESETTest")
resettest(formBase,power=2:3, type="regressor", data=imoveiscwbav)
resultados <- lm(formula=formBase,data=imoveiscwbav)
summary (resultados)
step <- stepwise(resultados, direction= 'backward/forward', criterion ='AIC')
step
formBase = formula(price~age+parea+plaz+park+school+balc+elev+fitg+party+categ)
resultados <- lm(formula=formBase,data=imoveiscwbav)
summary (resultados)
resettest(formBase,power=2:3, type="regressor", data=imoveiscwbav)
bptest(formBase,studentize=FALSE, data=imoveiscwbav)
print("O valor chiquadrado tabelado é:")
qchisq(0.95, df=10, lower.tail = TRUE)
resultados <- lm(formula=formBase,data=imoveiscwbav)
summary (resultados)
resultados <- lm(formula=formBaseL,data=imoveiscwbav)
imoveiscwbav$lprice <- log(imoveiscwbav$price)
imoveiscwbav$lage <- log(imoveiscwbav$age)
imoveiscwbav$lparea <- log(imoveiscwbav$parea)
imoveiscwbav$lplaz <- log(imoveiscwbav$plaz)
imoveiscwbav$lpark <- log(imoveiscwbav$park)
imoveiscwbav$lschool <- log(imoveiscwbav$school)
formBaseL = formula(lprice~lage+lparea+lplaz+lpark+lschool+balc+elev+fitg+party+categ)
bptest(formBaseL,studentize=FALSE, data=imoveiscwbav)
resultados <- lm(formula=formBaseL,data=imoveiscwbav)
summary (resultados)
resultrob <- lmRob(formBaseL,data=imoveiscwbav)
summary(resultrob)
resultados$residuals
imoveiscwbav<- resultados(wage, {residuos <- residuals(resultados) })
resultados$residuals
imoveiscwbav<- within(imoveiscwbav, {residuos <- residuals(resultados) })
resultados$fitted.values
imoveiscwbav<- within(imoveiscwbav, {preditos <- fitted.values(resultados)})
val <- predict(object = resultados,
data.frame(lage=1.0986, lparea=2.394,lplaz=-1.5764,lpark=1.2672,lschool=0.5675,balc=0,elev=0,fitg=0,party=1,categ=1))
val
val <- predict(object = resultrob,
data.frame(lage=1.0986, lparea=2.394,lplaz=-1.5764,lpark=1.2672,lschool=0.5675,balc=0,elev=0,fitg=0,party=1,categ=1))
val
exp(13.67026)
load("D:/Cursos/Pos_IA/Estatistica_aplicada_I/exercicio2/imoveiscwbav.RData")
library("PanJen")
library (carData)
library(car)
library (zoo)
library (lmtest)
library(RcmdrMisc)
library(robust)
library(performance)
formBase = formula(price~age+parea+tarea+bath+ensuit+garag+plaz+park+trans+kidca+school+health+bike+barb+balc+elev+fitg+party+categ)
resultados <- lm(formula=formBase,data=imoveiscwbav)
summary (resultados)
print("Testando a variável 'age':")
PanJenAge<-fform(imoveiscwbav,"age",formBase)
print("Testando a variável 'parea':")
PanJenParea<-fform(imoveiscwbav,"parea",formBase)
print("Testando a variável 'tarea':")
PanJenTarea<-fform(imoveiscwbav,"tarea",formBase)
print("Testando a variável 'plaz':")
PanJenPlaz<-fform(imoveiscwbav,"plaz",formBase)
print("Testando a variável 'park':")
PanJenPark<-fform(imoveiscwbav,"park",formBase)
print("Testando a variável 'trans':")
PanJenTrans<-fform(imoveiscwbav,"trans",formBase)
print("Testando a variável 'kidca':")
PanJenKidca<-fform(imoveiscwbav,"kidca",formBase)
print("Testando a variável 'school':")
PanJenSchool<-fform(imoveiscwbav,"school",formBase)
print("Testando a variável 'health':")
PanJenHealth<-fform(imoveiscwbav,"health",formBase)
print("Testando a variável 'bike':")
PanJenBike<-fform(imoveiscwbav,"bike",formBase)
print("F tabelado:")
qf(0.95, df1=38, df2=483)
resettest(formBase,power=2:3, type="regressor", data=imoveiscwbav)
print('sqrt(age)')
imoveiscwbav$age = sqrt(imoveiscwbav$age)
print('sqrt(parea)')
imoveiscwbav$parea = sqrt(imoveiscwbav$parea)
print('sqrt(tarea)')
imoveiscwbav$tarea = sqrt(imoveiscwbav$tarea)
print('park ^ 2')
imoveiscwbav$park = (imoveiscwbav$park)^2
print('log(trans)')
imoveiscwbav$trans = log(imoveiscwbav$trans)
resettest(formBase,power=2:3, type="regressor", data=imoveiscwbav)
print("Verificando multicolinearidade pelo VIF - Valor de Inflação da Variância")
vif(lm(price~age+parea+tarea+bath+ensuit+garag+plaz+park+trans+kidca+school+health+bike,data=imoveiscwbav), type="high-order")
print("Excluindo 'tarea'")
formBase = formula(price~age+parea+bath+ensuit+garag+plaz+park+trans+kidca+school+health+bike+barb+balc+elev+fitg+party+categ)
print("Verificando pela matriz de correlação")
cor(imoveiscwbav[,c("age","parea","tarea","bath","ensuit","garag","plaz","park","trans","kidca","school","health","bike")],
use="complete")
print("Excluindo 'bath','ensuit' e 'garag'")
formBase = formula(price~age+parea+plaz+park+trans+kidca+school+health+bike+barb+balc+elev+fitg+party+categ)
resultados <- lm(formula=formBase,data=imoveiscwbav)
summary (resultados)
step <- stepwise(resultados, direction= 'backward/forward', criterion ='AIC')
step
bptest(formBase,studentize=FALSE, data=imoveiscwbav)
print("O valor chiquadrado tabelado é:")
qchisq(0.95, df=11, lower.tail = TRUE)
imoveiscwbav$lprice <- log(imoveiscwbav$price)
imoveiscwbav$lage <- log(imoveiscwbav$age)
imoveiscwbav$lparea <- log(imoveiscwbav$parea)
imoveiscwbav$lplaz <- log(imoveiscwbav$plaz)
imoveiscwbav$lpark <- log(imoveiscwbav$park)
imoveiscwbav$lkidca <- log(imoveiscwbav$kidca)
imoveiscwbav$lbike <- log(imoveiscwbav$bike)
formBaseL = formula(lprice~lage+lparea+lplaz+lpark+lkidca+lbike+balc+elev+fitg+party+categ)
bptest(formBaseL,studentize=FALSE, data=imoveiscwbav)
resultados <- lm(formula=formBaseL,data=imoveiscwbav)
summary (resultados)
resettest(formBase,power=2:3, type="regressor", data=imoveiscwbav)
resettest(formBaseL,power=2:3, type="regressor", data=imoveiscwbav)
resultrob <- lmRob(formBaseL,data=imoveiscwbav)
summary(resultrob)
model_performance(resultados)
model_performance(resultrob)
val <- predict(object = resultados,
data.frame(lage=1.0986, lparea=2.394,lplaz=-1.5764,lpark=1.2672,lkidca=0.3362,lbike=-1.0531,balc=0,elev=0,fitg=0,party=1,categ=1))
val
exp(val)
val <- predict(object = resultrob,
data.frame(lage=1.0986, lparea=2.394,lplaz=-1.5764,lpark=1.2672,lkidca=0.3362,lbike=-1.0531,balc=0,elev=0,fitg=0,party=1,categ=1))
val
exp(val)
knitr::opts_chunk$set(echo = FALSE)
load("D:/Cursos/Pos_IA/Estatistica_aplicada_I/exercicio2/imoveiscwbav.RData")
imoveiscwbav$plaz = exp(imoveiscwbav$plaz)
imoveiscwbav$park = exp(imoveiscwbav$park)
imoveiscwbav$trans = exp(imoveiscwbav$trans)
imoveiscwbav$kidca = exp(imoveiscwbav$kidca)
imoveiscwbav$school = exp(imoveiscwbav$school)
imoveiscwbav$health = exp(imoveiscwbav$health)
imoveiscwbav$bike = exp(imoveiscwbav$bike)
library("PanJen")
library (carData)
library(car)
library (zoo)
library (lmtest)
library(RcmdrMisc)
library(robust)
library(performance)
formBase = formula(price~age+parea+tarea+bath+ensuit+garag+plaz+park+trans+kidca+school+health+bike+barb+balc+elev+fitg+party+categ)
resultados <- lm(formula=formBase,data=imoveiscwbav)
summary (resultados)
print("Testando a variável 'age':")
PanJenAge<-fform(imoveiscwbav,"age",formBase)
print("Testando a variável 'parea':")
PanJenParea<-fform(imoveiscwbav,"parea",formBase)
print("Testando a variável 'tarea':")
PanJenTarea<-fform(imoveiscwbav,"tarea",formBase)
print("Testando a variável 'plaz':")
PanJenPlaz<-fform(imoveiscwbav,"plaz",formBase)
print("Testando a variável 'park':")
PanJenPark<-fform(imoveiscwbav,"park",formBase)
print("Testando a variável 'trans':")
PanJenTrans<-fform(imoveiscwbav,"trans",formBase)
print("Testando a variável 'kidca':")
PanJenKidca<-fform(imoveiscwbav,"kidca",formBase)
print("Testando a variável 'school':")
PanJenSchool<-fform(imoveiscwbav,"school",formBase)
print("Testando a variável 'health':")
PanJenHealth<-fform(imoveiscwbav,"health",formBase)
print("Testando a variável 'bike':")
PanJenBike<-fform(imoveiscwbav,"bike",formBase)
outlierTest(resultados)
resettest(formBase,power=2:3, type="regressor", data=imoveiscwbav)
print("F tabelado:")
qf(0.95, df1=38, df2=483)
print('sqrt(age)')
imoveiscwbav$age = sqrt(imoveiscwbav$age)
print('sqrt(parea)')
imoveiscwbav$parea = sqrt(imoveiscwbav$parea)
print('sqrt(tarea)')
imoveiscwbav$tarea = sqrt(imoveiscwbav$tarea)
print('1/park')
imoveiscwbav$park = 1/imoveiscwbav$park
print('1/trans')
imoveiscwbav$trans = 1/imoveiscwbav$trans
print('sqrt(kidca)')
imoveiscwbav$kidca = sqrt(imoveiscwbav$kidca)
resettest(formBase,power=2:3, type="regressor", data=imoveiscwbav)
print("Verificando pela matriz de correlação")
cor(imoveiscwbav[,c("age","parea","tarea","bath","ensuit","garag","plaz","park","trans","kidca","school","health","bike")],
use="complete")
print("Excluindo 'tarea','bath','ensuit' e 'garag'")
formBase = formula(price~age+parea+plaz+park+trans+kidca+school+health+bike+barb+balc+elev+fitg+party+categ)
print("Verificando multicolinearidade pelo VIF - Valor de Inflação da Variância")
vif(lm(formBase,data=imoveiscwbav), type="high-order")
print("Refazendo o RESETTest")
resettest(formBase,power=2:3, type="regressor", data=imoveiscwbav)
resultados <- lm(formula=formBase,data=imoveiscwbav)
summary (resultados)
step <- stepwise(resultados, direction= 'backward/forward', criterion ='AIC')
step
formBase = formula(price~age+parea+plaz+park+school+balc+elev+fitg+party+categ)
resultados <- lm(formula=formBase,data=imoveiscwbav)
summary (resultados)
resettest(formBase,power=2:3, type="regressor", data=imoveiscwbav)
bptest(formBase,studentize=FALSE, data=imoveiscwbav)
print("O valor chiquadrado tabelado é:")
qchisq(0.95, df=10, lower.tail = TRUE)
imoveiscwbav$lprice <- log(imoveiscwbav$price)
imoveiscwbav$lage <- log(imoveiscwbav$age)
imoveiscwbav$lparea <- log(imoveiscwbav$parea)
imoveiscwbav$lplaz <- log(imoveiscwbav$plaz)
imoveiscwbav$lpark <- log(imoveiscwbav$park)
imoveiscwbav$lschool <- log(imoveiscwbav$school)
formBaseL = formula(lprice~lage+lparea+lplaz+lpark+lschool+balc+elev+fitg+party+categ)
bptest(formBaseL,studentize=FALSE, data=imoveiscwbav)
resultados <- lm(formula=formBaseL,data=imoveiscwbav)
summary (resultados)
resultrob <- lmRob(formBaseL,data=imoveiscwbav)
summary(resultrob)
model_performance(resultados)
model_performance(resultrob)
confint(resultados, level = 0.95)
confint(resultrob, level=0.95)
val <- predict(object = resultrob,
data.frame(lage=1.0986, lparea=2.394,lplaz=-1.5764,lpark=1.2672,lschool=0.5675,balc=0,elev=0,fitg=0,party=1,categ=1))
val
exp(13.67026)
formBaseL = formula(lprice~lage+lparea+lpark+lschool+balc+elev+fitg+party+categ)
resultrob <- lmRob(formBaseL,data=imoveiscwbav)
summary(resultrob)
formBaseL = formula(lprice~lage+lparea+lpark+balc+elev+fitg+party+categ)
resultrob <- lmRob(formBaseL,data=imoveiscwbav)
summary(resultrob)
predict(object = resultrob,
data.frame(lage=1.0986, lparea=2.394,lpark=1.2672,balc=0,elev=0,fitg=0,party=1,categ=1))
exp(13.94635)
formula <- y ~ x1 + x2
formula(x1=10,x2=17)
formula(10,17)
formula(x1<-10,x2<-17)
x1<-10
x2<-15
formula
y
formula(x1,x2)
x <- list(1:5, "Z", TRUE, c("a", "b"))
x
names(x) <- c("numeros", "letra", "lógico", "vetor")
x
unlist(x)
x <- unlist(x)
x
x$numeros2
x$[1]
x[1]
x[numero2]
x[numeros2]
#Exercicio slide 8 - Página 21
v1<-c(2005:2016)
v2<-c(1:12)
v3<-c(1:31)
v1
v2
v3
datas<-list(anos = v1, meses = v2, dias = v3)
datas
#Exercicio slide 8 - Página 22
v<-c(1,3,4,7,11,18,29)
listaCalc <- list(`x*2`=v*2, `x/2`= v/2, `sqrt(x)` = sqrt(v))
listaCalc
df <- data.frame()
df$x <- integer()
df$y <- character()
df[nrow(df)+1,] <- c(10, "anna")
df
nrow(df)
df[nrow(df)+1,] <- c(11, "pietra")
df
summary(df)
df <- data.frame(id = letters[1:10], x = 1:10, y = 11:20)
summary(df)
lista <- list(x=c(1, 2, 3), y=c("a", "b", "c"))
df <- as.data.frame(lista)
df$y
df
df[,2]
df1 <- data.frame(nome=c("Razer", "Anthom", "Nizer", "Rojas", "Montaño"),
cidadeId=c(3, 10, 2, 3, 1))
cidades <- data.frame(cidadeId=c(1, 2, 3, 4), cidade=c("Curitiba", "SJP",
"Pinhais", "Colombo"))
df1
cidades
merge(df1,cidades)
# Slide 9 - Página 40
df <- data.frame(letras=letters[1:10],numeros=21:30,valores=rnorm(10))
# a)Retorne a linha 5
df[5,]
df
# b)Retorna a coluna 2 (como vetor e como data frame –drop=FALSE)
df[,2]
df[,2,drop=FALSE]
# c)Retorne as colunas 2 e 3
df[,c(2,3)]
# d)Retorne os elementos da linha 6, mas somente as colunas 1 e 3
df[6,c(1,3)]
# e)Retorne os elementos que possuem na coluna "valores" um valor maior que zero
df[df$valores > 0,]
# f)Retorne os elementos que possuem na coluna "numeros" um valor ímpar
df[df$numeros%%2 != 0,]
# g)Retorne os elementos que possuem na coluna "valores" um valor maior que zero e na coluna "numeros" um valor par
df[df$valores > 0 & df$numeros%%2 == 0,]
# h)Retorne os elementos que possuem na coluna "letras" somente os seguintes valores "b",  "g", "h"
df[df$letras %in% c("b","g","h"),]
# Slide 9 - Página 49
df1 <-data.frame(nome=c("Razer", "Anthom", "Nizer", "Rojas", "Montaño"), cidadeId=c(3, 10, 2, 3, 1))
cidades <-data.frame(cidadeId=c(1, 2, 3, 4), cidade=c("Curitiba", "SJP", "Pinhais", "Colombo"))
# Slide 9 - Página 49
df1 <-data.frame(nome=c("Razer", "Anthom", "Nizer", "Rojas", "Montaño"), cidadeId=c(3, 10, 2, 3, 1))
cidades <-data.frame(cidadeId=c(1, 2, 3, 4), cidade=c("Curitiba", "SJP", "Pinhais", "Colombo"))
#a)Cross Join
merge(df1,cidades,by=NULL)
#b)InnerJoin
merge(df1,cidades,by="cidadeId")
#c)OuterJoin
merge(df1,cidades,by="cidadeId",all=TRUE)
#d)LeftOuterJoin
merge(df1,cidades,by="cidadeId",all.x=TRUE)
#e)RightOuterJoin
merge(df1,cidades,by="cidadeId",all.y=TRUE)
idade <- sample( 14:102, 10)
idade
n <- 10
sexo <- sample( c("masculino", "feminino"), n, replace=TRUE)
idade <- sample( 14:102, n, replace=TRUE)
peso <- sample( 50:90, n, replace=TRUE)
menor <- idade<18
menor
pessoas <- data.frame(sexo=sexo, idade=idade, peso=peso, menor=menor)
pessoas
pessoas(maior <- idade>18)
pessoas[maior <- idade>18)]
pessoas[maior <- idade>18]
pessoas$maior <- idade>18
pessoas
n<-10
sexo <-sample( c("masculino", "feminino"), n, replace=TRUE)
idade <-sample( 14:102, n, replace=TRUE)
peso <-sample( 50:90, n, replace=TRUE)
menor <-idade<18
pessoas <-data.frame(sexo=sexo, idade=idade, peso=peso, menor=menor, stringsAsFactors=FALSE)
pessoas
#•Ordene o data frame por peso
pessoas[order(pessoas$peso),]
#•Ordene o data frame por sexo e peso, decrescentemente
pessoas[order(pessoas$sexo,-pessoas$peso),]
#•Dê a maior idade nos dados (max)
max(pessoas$idade)
#•Dê a média dos pesos (mean)
mean(pessoas$peso)
#•Mostrar as pessoas do sexo feminino que estão na base
pessoas[pessoas$sexo == 'feminino',]
#•Contar as pessoas do sexo feminino (nrow)
nrow(pessoas[pessoas$sexo == 'feminino',])
#Slide 10 - Página 22
#Carregue o arquivo http://www.razer.net.br/datasets/Biomassa_REG.csv
read.csv2("Biomassa_REG.csv")
#Slide 10 - Página 22
#Carregue o arquivo http://www.razer.net.br/datasets/Biomassa_REG.csv
setwd("D:/Cursos/Pos_IA/linguagem_r")
read.csv2("Biomassa_REG.csv")
biomassa<-read.csv2("Biomassa_REG.csv")
#Carregue o arquivo http://www.razer.net.br/datasets/fertility.csv
fert<-read.csv("fertility.csv")
View(biomassa)
View(fert)
#Salve a base de dados IRIS (data frameiris) usando os seguintes formatos:
#a.Separador "**", ponto decimal ".", sem os nomes das linhas e o cabeçalho de colunas,
#com aspas nos campos string
write.table(iris,"iris1.txt",sep="**",dec=".",row.names=FALSE,col.names = FALSE)
#b.CSV com ponto decimal ",", sem os nomes das linhas, com o cabeçalho de colunas e sem aspas nos campos string
write.table(iris,"iris1.csv",sep=";",dec=",",row.names=FALSE,col.names = TRUE,quote = FALSE)
matriz <- matrix(data=1:12, nrow=6, ncol=2)
for (l in 1:nrow(matriz)) {
for (c in 1:ncol(matriz)) {
print( matriz[l, c]*10 )
}
}
matriz
comprimento <- function (raio) {}
comprimento <- function (raio) {
return( 2*pi*raio)}
comprimento(10)
dados <- 1:10
sapply(dados,comprimento)
lapply(dados,comprimento)
apply(dados,comprimento)
mcapply(dados,comprimento)
library(parallel, lib.loc = "C:/Program Files/R/R-4.2.0/library")
install.packages("parallel")
install.packages("parallel")
library(parallel)
mcapply(dados,comprimento)
rnorm(10)
rnorm(10)
rnorm(10)
val <- rnorm(10)
val
mean(val)
median(val)
order(val)
sort(val)
(0.1398606 + 0.1517336)/2
sd(val)
